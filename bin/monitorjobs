#!/bin/zsh
# leave as zsh to support environment vars
# Requirements: aws-cli, jq

usage="$(basename "$0") -fvh uses aws-cli to monitor the codepipeline status of \$AWS_JOBS_LIST.
Requirments:
jq and aws-cli installed
\$AWS_PIPELINE_PROFILE be set to appropriate argument to --profile option of aws-cli
and either
\$AWS_JOBS_LIST be set as an array which contains the jobs to monitor (ZSH)
or
-f FILE provided which contains the jobs to monitor, one per line (other shells)

Additionally, user must be authenticated with aws (e.g., via .aws/config)."
version="0.1.3"

while getopts ':vhf:' option; do
  case "$option" in
    h) echo "$usage"
      exit
      ;;
    f) jobFile="$OPTARG"
      echo "sup"
      ;;
    v) echo "version $version"
      exit
      ;;
    *) echo "Unknown Option '$OPTARG', exiting"
      exit
      ;;
  esac
done
shift $((OPTIND -1))

# JQ partials

getFailedAction='[.actionStates[] | select( .latestExecution.status != "Succeeded")][0]'
printActionStatus='[35m\(.actionName)[0m \(.latestExecution.status)'
checkAndPassLastChange='.latestExecution.lastStatusChange then .latestExecution.lastStatusChange'
awsTimeSinceSecOffsets='split(".")| { offset: (.[1][6:9] | tonumber), sec: (.[0] + "Z" | fromdate) }'
offsetAdjust='now - .sec + ((.offset + 1) * 60 * 60)'
formatMinSec='(. / 60 | floor | tostring) + "m" + (. % 60 | tostring) + "s"'

# Compose filter chain
fullJQ=$(echo '[.stageStates[] | select( .latestExecution.status != "Succeeded")][0] | try ' $getFailedAction \
      ' |"' $printActionStatus ' (\( if ' $checkAndPassLastChange \
        ' | ' $awsTimeSinceSecOffsets ' | ' "$offsetAdjust" ' | ' $formatMinSec \
      ' else ""' \
      ' end))"')

# Get job states
awsjobs () {
  for job in "${AWS_JOBS_LIST[@]}"
  do
    latestNonSuccessful=$( aws codepipeline get-pipeline-state \
      --profile="${AWS_PIPELINE_PROFILE}" \
      --name="${job}" --output=json \
      | jq "$fullJQ"
    )
    if [ $? -ne 0 ]; then
      exit
    fi
    latestNonSuccessful="${latestNonSuccessful%\"}"
    latestNonSuccessful="${latestNonSuccessful#\"}"
    if [ -z "$latestNonSuccessful" ]; then
      echo -n "‚úÖ [38;5;000;48;5;040m$job[0m"
    elif [[ "$latestNonSuccessful" == *"Failed"* ]]; then
      echo -n "‚ùå [38;5;000;48;5;009m$job[0m: $latestNonSuccessful"
    else
      echo -n "‚õ¥  [38;5;000;48;5;226m$job[0m: $latestNonSuccessful"
    fi
    tput el
    echo
  done
}

if [ -n "$jobFile" ] && [ -f "$jobFile" ]; then
  IFS=$'\r\n' GLOBIGNORE='*' eval 'AWS_JOBS_LIST=($(cat "$jobFile"))'
  echo "$AWS_JOBS_LIST"
elif [ -z "$AWS_JOBS_LIST" ] || [ ${#AWS_JOBS_LIST[@]} -eq 0 ]; then
  echo "No jobs listed provided"
  echo "$usage"
  exit
fi

if [ -z "$AWS_PIPELINE_PROFILE" ]; then
  echo "AWS_PIPELINE_PROFILE not set"
  echo "$usage"
  exit
fi

clear
while true;
do
  awsjobs
  tput ed || tput cd
  sleep 20
  tput home
done
